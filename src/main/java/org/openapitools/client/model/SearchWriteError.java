/*
 * Search Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Search.JSON;

/**
 * contain error information obtained during writing process in search storage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-27T14:37:24.985944871Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class SearchWriteError {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DOCUMENT_KEY_NAME = "documentKeyName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_KEY_NAME)
  private String documentKeyName;

  public static final String SERIALIZED_NAME_DOCUMENT_KEY_VALUE = "documentKeyValue";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_KEY_VALUE)
  private String documentKeyValue;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public SearchWriteError() {
  }

  public SearchWriteError code(String code) {
    this.code = code;
    return this;
  }

  /**
   * error identifier code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public SearchWriteError documentKeyName(String documentKeyName) {
    this.documentKeyName = documentKeyName;
    return this;
  }

  /**
   * document key used to identify document
   * @return documentKeyName
   */
  @javax.annotation.Nullable
  public String getDocumentKeyName() {
    return documentKeyName;
  }

  public void setDocumentKeyName(String documentKeyName) {
    this.documentKeyName = documentKeyName;
  }


  public SearchWriteError documentKeyValue(String documentKeyValue) {
    this.documentKeyValue = documentKeyValue;
    return this;
  }

  /**
   * document key identifier
   * @return documentKeyValue
   */
  @javax.annotation.Nullable
  public String getDocumentKeyValue() {
    return documentKeyValue;
  }

  public void setDocumentKeyValue(String documentKeyValue) {
    this.documentKeyValue = documentKeyValue;
  }


  public SearchWriteError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * error description message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SearchWriteError instance itself
   */
  public SearchWriteError putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchWriteError searchWriteError = (SearchWriteError) o;
    return Objects.equals(this.code, searchWriteError.code) &&
        Objects.equals(this.documentKeyName, searchWriteError.documentKeyName) &&
        Objects.equals(this.documentKeyValue, searchWriteError.documentKeyValue) &&
        Objects.equals(this.message, searchWriteError.message)&&
        Objects.equals(this.additionalProperties, searchWriteError.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, documentKeyName, documentKeyValue, message, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchWriteError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    documentKeyName: ").append(toIndentedString(documentKeyName)).append("\n");
    sb.append("    documentKeyValue: ").append(toIndentedString(documentKeyValue)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("documentKeyName");
    openapiFields.add("documentKeyValue");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchWriteError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchWriteError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchWriteError is not found in the empty JSON string", SearchWriteError.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchWriteError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("documentKeyName") != null && !jsonObj.get("documentKeyName").isJsonNull()) && !jsonObj.get("documentKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentKeyName").toString()));
      }
      if ((jsonObj.get("documentKeyValue") != null && !jsonObj.get("documentKeyValue").isJsonNull()) && !jsonObj.get("documentKeyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentKeyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentKeyValue").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchWriteError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchWriteError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchWriteError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchWriteError.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchWriteError>() {
           @Override
           public void write(JsonWriter out, SearchWriteError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchWriteError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SearchWriteError instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchWriteError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchWriteError
   * @throws IOException if the JSON string is invalid with respect to SearchWriteError
   */
  public static SearchWriteError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchWriteError.class);
  }

  /**
   * Convert an instance of SearchWriteError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

