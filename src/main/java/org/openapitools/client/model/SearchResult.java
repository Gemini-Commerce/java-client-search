/*
 * Search Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SearchAggrMap;
import org.openapitools.client.model.SearchParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Search.JSON;

/**
 * contains the search results, aggregations and paging information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T11:12:56.191245973Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class SearchResult {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private SearchParams params;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Long page;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Long totalPages;

  public static final String SERIALIZED_NAME_TOTAL_HITS = "totalHits";
  @SerializedName(SERIALIZED_NAME_TOTAL_HITS)
  private Long totalHits;

  public static final String SERIALIZED_NAME_HITS = "hits";
  @SerializedName(SERIALIZED_NAME_HITS)
  private List<String> hits = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGGREGATIONS = "aggregations";
  @SerializedName(SERIALIZED_NAME_AGGREGATIONS)
  private Map<String, SearchAggrMap> aggregations = new HashMap<>();

  public SearchResult() {
  }

  public SearchResult index(String index) {
    this.index = index;
    return this;
  }

  /**
   * index where the data were extrapolated
   * @return index
   */
  @javax.annotation.Nonnull
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }


  public SearchResult params(SearchParams params) {
    this.params = params;
    return this;
  }

  /**
   * Get params
   * @return params
   */
  @javax.annotation.Nullable
  public SearchParams getParams() {
    return params;
  }

  public void setParams(SearchParams params) {
    this.params = params;
  }


  public SearchResult page(Long page) {
    this.page = page;
    return this;
  }

  /**
   * page number of the results you are processing
   * @return page
   */
  @javax.annotation.Nullable
  public Long getPage() {
    return page;
  }

  public void setPage(Long page) {
    this.page = page;
  }


  public SearchResult totalPages(Long totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * number of pages of results
   * @return totalPages
   */
  @javax.annotation.Nullable
  public Long getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Long totalPages) {
    this.totalPages = totalPages;
  }


  public SearchResult totalHits(Long totalHits) {
    this.totalHits = totalHits;
    return this;
  }

  /**
   * number of total search results
   * @return totalHits
   */
  @javax.annotation.Nullable
  public Long getTotalHits() {
    return totalHits;
  }

  public void setTotalHits(Long totalHits) {
    this.totalHits = totalHits;
  }


  public SearchResult hits(List<String> hits) {
    this.hits = hits;
    return this;
  }

  public SearchResult addHitsItem(String hitsItem) {
    if (this.hits == null) {
      this.hits = new ArrayList<>();
    }
    this.hits.add(hitsItem);
    return this;
  }

  /**
   * search result records contained in the specified page
   * @return hits
   */
  @javax.annotation.Nullable
  public List<String> getHits() {
    return hits;
  }

  public void setHits(List<String> hits) {
    this.hits = hits;
  }


  public SearchResult aggregations(Map<String, SearchAggrMap> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public SearchResult putAggregationsItem(String key, SearchAggrMap aggregationsItem) {
    if (this.aggregations == null) {
      this.aggregations = new HashMap<>();
    }
    this.aggregations.put(key, aggregationsItem);
    return this;
  }

  /**
   * array of aggregation obtained by search result
   * @return aggregations
   */
  @javax.annotation.Nullable
  public Map<String, SearchAggrMap> getAggregations() {
    return aggregations;
  }

  public void setAggregations(Map<String, SearchAggrMap> aggregations) {
    this.aggregations = aggregations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SearchResult instance itself
   */
  public SearchResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResult searchResult = (SearchResult) o;
    return Objects.equals(this.index, searchResult.index) &&
        Objects.equals(this.params, searchResult.params) &&
        Objects.equals(this.page, searchResult.page) &&
        Objects.equals(this.totalPages, searchResult.totalPages) &&
        Objects.equals(this.totalHits, searchResult.totalHits) &&
        Objects.equals(this.hits, searchResult.hits) &&
        Objects.equals(this.aggregations, searchResult.aggregations)&&
        Objects.equals(this.additionalProperties, searchResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, params, page, totalPages, totalHits, hits, aggregations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResult {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    totalHits: ").append(toIndentedString(totalHits)).append("\n");
    sb.append("    hits: ").append(toIndentedString(hits)).append("\n");
    sb.append("    aggregations: ").append(toIndentedString(aggregations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("params");
    openapiFields.add("page");
    openapiFields.add("totalPages");
    openapiFields.add("totalHits");
    openapiFields.add("hits");
    openapiFields.add("aggregations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("index");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResult is not found in the empty JSON string", SearchResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      // validate the optional field `params`
      if (jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) {
        SearchParams.validateJsonElement(jsonObj.get("params"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hits") != null && !jsonObj.get("hits").isJsonNull() && !jsonObj.get("hits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hits` to be an array in the JSON string but got `%s`", jsonObj.get("hits").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResult>() {
           @Override
           public void write(JsonWriter out, SearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SearchResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResult
   * @throws IOException if the JSON string is invalid with respect to SearchResult
   */
  public static SearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResult.class);
  }

  /**
   * Convert an instance of SearchResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

