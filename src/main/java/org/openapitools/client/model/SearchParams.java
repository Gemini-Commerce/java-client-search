/*
 * Search Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchParamAttribute;
import org.openapitools.client.model.SearchParamFacet;
import org.openapitools.client.model.SearchParamFilter;
import org.openapitools.client.model.SearchParamSearchable;
import org.openapitools.client.model.SearchParamSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Search.JSON;

/**
 * contains params needed to perform search
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-27T14:37:24.985944871Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class SearchParams {
  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Long offset;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Long limit;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_SEARCHABLES = "searchables";
  @SerializedName(SERIALIZED_NAME_SEARCHABLES)
  private List<SearchParamSearchable> searchables = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<SearchParamFilter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<SearchParamAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private List<SearchParamFacet> facets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORTS = "sorts";
  @SerializedName(SERIALIZED_NAME_SORTS)
  private List<SearchParamSort> sorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_SCORE = "minScore";
  @SerializedName(SERIALIZED_NAME_MIN_SCORE)
  private Float minScore;

  public SearchParams() {
  }

  public SearchParams offset(Long offset) {
    this.offset = offset;
    return this;
  }

  /**
   * number of the record where to start to take result for pagination
   * @return offset
   */
  @javax.annotation.Nullable
  public Long getOffset() {
    return offset;
  }

  public void setOffset(Long offset) {
    this.offset = offset;
  }


  public SearchParams limit(Long limit) {
    this.limit = limit;
    return this;
  }

  /**
   * number of search result for page
   * @return limit
   */
  @javax.annotation.Nullable
  public Long getLimit() {
    return limit;
  }

  public void setLimit(Long limit) {
    this.limit = limit;
  }


  public SearchParams term(String term) {
    this.term = term;
    return this;
  }

  /**
   * term to search
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }


  public SearchParams searchables(List<SearchParamSearchable> searchables) {
    this.searchables = searchables;
    return this;
  }

  public SearchParams addSearchablesItem(SearchParamSearchable searchablesItem) {
    if (this.searchables == null) {
      this.searchables = new ArrayList<>();
    }
    this.searchables.add(searchablesItem);
    return this;
  }

  /**
   * list of attributes where to search the indicated term, if not indicated it uses all in those present in index configuration
   * @return searchables
   */
  @javax.annotation.Nullable
  public List<SearchParamSearchable> getSearchables() {
    return searchables;
  }

  public void setSearchables(List<SearchParamSearchable> searchables) {
    this.searchables = searchables;
  }


  public SearchParams filters(List<SearchParamFilter> filters) {
    this.filters = filters;
    return this;
  }

  public SearchParams addFiltersItem(SearchParamFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * list of attribute and relative value which you want to filter search results
   * @return filters
   */
  @javax.annotation.Nullable
  public List<SearchParamFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<SearchParamFilter> filters) {
    this.filters = filters;
  }


  public SearchParams attributes(List<SearchParamAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public SearchParams addAttributesItem(SearchParamAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * attributes that you want to be present in search results
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<SearchParamAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<SearchParamAttribute> attributes) {
    this.attributes = attributes;
  }


  public SearchParams facets(List<SearchParamFacet> facets) {
    this.facets = facets;
    return this;
  }

  public SearchParams addFacetsItem(SearchParamFacet facetsItem) {
    if (this.facets == null) {
      this.facets = new ArrayList<>();
    }
    this.facets.add(facetsItem);
    return this;
  }

  /**
   * list of attributes you want to create aggregation to make filter suggestion
   * @return facets
   */
  @javax.annotation.Nullable
  public List<SearchParamFacet> getFacets() {
    return facets;
  }

  public void setFacets(List<SearchParamFacet> facets) {
    this.facets = facets;
  }


  public SearchParams sorts(List<SearchParamSort> sorts) {
    this.sorts = sorts;
    return this;
  }

  public SearchParams addSortsItem(SearchParamSort sortsItem) {
    if (this.sorts == null) {
      this.sorts = new ArrayList<>();
    }
    this.sorts.add(sortsItem);
    return this;
  }

  /**
   * params to sort search results
   * @return sorts
   */
  @javax.annotation.Nullable
  public List<SearchParamSort> getSorts() {
    return sorts;
  }

  public void setSorts(List<SearchParamSort> sorts) {
    this.sorts = sorts;
  }


  public SearchParams minScore(Float minScore) {
    this.minScore = minScore;
    return this;
  }

  /**
   * Get minScore
   * @return minScore
   */
  @javax.annotation.Nullable
  public Float getMinScore() {
    return minScore;
  }

  public void setMinScore(Float minScore) {
    this.minScore = minScore;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SearchParams instance itself
   */
  public SearchParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchParams searchParams = (SearchParams) o;
    return Objects.equals(this.offset, searchParams.offset) &&
        Objects.equals(this.limit, searchParams.limit) &&
        Objects.equals(this.term, searchParams.term) &&
        Objects.equals(this.searchables, searchParams.searchables) &&
        Objects.equals(this.filters, searchParams.filters) &&
        Objects.equals(this.attributes, searchParams.attributes) &&
        Objects.equals(this.facets, searchParams.facets) &&
        Objects.equals(this.sorts, searchParams.sorts) &&
        Objects.equals(this.minScore, searchParams.minScore)&&
        Objects.equals(this.additionalProperties, searchParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offset, limit, term, searchables, filters, attributes, facets, sorts, minScore, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchParams {\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    searchables: ").append(toIndentedString(searchables)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    sorts: ").append(toIndentedString(sorts)).append("\n");
    sb.append("    minScore: ").append(toIndentedString(minScore)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offset");
    openapiFields.add("limit");
    openapiFields.add("term");
    openapiFields.add("searchables");
    openapiFields.add("filters");
    openapiFields.add("attributes");
    openapiFields.add("facets");
    openapiFields.add("sorts");
    openapiFields.add("minScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchParams is not found in the empty JSON string", SearchParams.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
      if (jsonObj.get("searchables") != null && !jsonObj.get("searchables").isJsonNull()) {
        JsonArray jsonArraysearchables = jsonObj.getAsJsonArray("searchables");
        if (jsonArraysearchables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("searchables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `searchables` to be an array in the JSON string but got `%s`", jsonObj.get("searchables").toString()));
          }

          // validate the optional field `searchables` (array)
          for (int i = 0; i < jsonArraysearchables.size(); i++) {
            SearchParamSearchable.validateJsonElement(jsonArraysearchables.get(i));
          };
        }
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            SearchParamFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            SearchParamAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if (jsonObj.get("facets") != null && !jsonObj.get("facets").isJsonNull()) {
        JsonArray jsonArrayfacets = jsonObj.getAsJsonArray("facets");
        if (jsonArrayfacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facets` to be an array in the JSON string but got `%s`", jsonObj.get("facets").toString()));
          }

          // validate the optional field `facets` (array)
          for (int i = 0; i < jsonArrayfacets.size(); i++) {
            SearchParamFacet.validateJsonElement(jsonArrayfacets.get(i));
          };
        }
      }
      if (jsonObj.get("sorts") != null && !jsonObj.get("sorts").isJsonNull()) {
        JsonArray jsonArraysorts = jsonObj.getAsJsonArray("sorts");
        if (jsonArraysorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sorts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sorts` to be an array in the JSON string but got `%s`", jsonObj.get("sorts").toString()));
          }

          // validate the optional field `sorts` (array)
          for (int i = 0; i < jsonArraysorts.size(); i++) {
            SearchParamSort.validateJsonElement(jsonArraysorts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchParams.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchParams>() {
           @Override
           public void write(JsonWriter out, SearchParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SearchParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchParams
   * @throws IOException if the JSON string is invalid with respect to SearchParams
   */
  public static SearchParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchParams.class);
  }

  /**
   * Convert an instance of SearchParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

